// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/git.go

// Package pkg_mock is a generated GoMock package.
package pkg_mock

import (
	gomock "github.com/golang/mock/gomock"
	git "github.com/knlambert/stale-pr-detector/pkg/git"
	models "github.com/knlambert/stale-pr-detector/pkg/models"
	reflect "reflect"
)

// MockGitClient is a mock of GitClient interface
type MockGitClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitClientMockRecorder
}

// MockGitClientMockRecorder is the mock recorder for MockGitClient
type MockGitClientMockRecorder struct {
	mock *MockGitClient
}

// NewMockGitClient creates a new mock instance
func NewMockGitClient(ctrl *gomock.Controller) *MockGitClient {
	mock := &MockGitClient{ctrl: ctrl}
	mock.recorder = &MockGitClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGitClient) EXPECT() *MockGitClientMockRecorder {
	return m.recorder
}

// PullRequestsList mocks base method
func (m *MockGitClient) PullRequestsList(repositoryURL string, filters *git.PullRequestsListFilters) ([]models.PullRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullRequestsList", repositoryURL, filters)
	ret0, _ := ret[0].([]models.PullRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullRequestsList indicates an expected call of PullRequestsList
func (mr *MockGitClientMockRecorder) PullRequestsList(repositoryURL, filters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullRequestsList", reflect.TypeOf((*MockGitClient)(nil).PullRequestsList), repositoryURL, filters)
}
