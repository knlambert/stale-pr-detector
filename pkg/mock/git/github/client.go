// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/git/github/client.go

// Package github_mock is a generated GoMock package.
package github_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v38/github"
	reflect "reflect"
	time "time"
)

// MocktimeWrapper is a mock of timeWrapper interface
type MocktimeWrapper struct {
	ctrl     *gomock.Controller
	recorder *MocktimeWrapperMockRecorder
}

// MocktimeWrapperMockRecorder is the mock recorder for MocktimeWrapper
type MocktimeWrapperMockRecorder struct {
	mock *MocktimeWrapper
}

// NewMocktimeWrapper creates a new mock instance
func NewMocktimeWrapper(ctrl *gomock.Controller) *MocktimeWrapper {
	mock := &MocktimeWrapper{ctrl: ctrl}
	mock.recorder = &MocktimeWrapperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MocktimeWrapper) EXPECT() *MocktimeWrapperMockRecorder {
	return m.recorder
}

// Sleep mocks base method
func (m *MocktimeWrapper) Sleep(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sleep", d)
}

// Sleep indicates an expected call of Sleep
func (mr *MocktimeWrapperMockRecorder) Sleep(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sleep", reflect.TypeOf((*MocktimeWrapper)(nil).Sleep), d)
}

// MockgoGithubSearch is a mock of goGithubSearch interface
type MockgoGithubSearch struct {
	ctrl     *gomock.Controller
	recorder *MockgoGithubSearchMockRecorder
}

// MockgoGithubSearchMockRecorder is the mock recorder for MockgoGithubSearch
type MockgoGithubSearchMockRecorder struct {
	mock *MockgoGithubSearch
}

// NewMockgoGithubSearch creates a new mock instance
func NewMockgoGithubSearch(ctrl *gomock.Controller) *MockgoGithubSearch {
	mock := &MockgoGithubSearch{ctrl: ctrl}
	mock.recorder = &MockgoGithubSearchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockgoGithubSearch) EXPECT() *MockgoGithubSearchMockRecorder {
	return m.recorder
}

// Issues mocks base method
func (m *MockgoGithubSearch) Issues(ctx context.Context, query string, opts *github.SearchOptions) (*github.IssuesSearchResult, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issues", ctx, query, opts)
	ret0, _ := ret[0].(*github.IssuesSearchResult)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Issues indicates an expected call of Issues
func (mr *MockgoGithubSearchMockRecorder) Issues(ctx, query, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issues", reflect.TypeOf((*MockgoGithubSearch)(nil).Issues), ctx, query, opts)
}
